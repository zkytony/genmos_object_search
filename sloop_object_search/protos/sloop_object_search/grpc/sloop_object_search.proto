// Top-level services. For example, start the sloop object search server

syntax = "proto3";

package sloop_object_search.grpc;

import "sloop_object_search/grpc/common.proto";
import "sloop_object_search/grpc/observation.proto";


service SloopObjectSearch {

  rpc CreateAgent(CreateAgentRequest) returns (CreateAgentReply) {}

  // Get agent status
  rpc GetAgentCreationStatus(GetAgentCreationStatusRequest) returns (GetAgentCreationStatusReply) {}

  // More fine-grained rpcs for specific functionality
  // Update search region by interpreting sensor data such as point cloud.
  rpc UpdateSearchRegion(UpdateSearchRegionRequest) returns (UpdateSearchRegionReply) {}

  // Process observation such as object detection or language
  rpc ProcessObservation(ProcessObservationRequest) returns (ProcessObservationReply) {}

  // Get current belief about where the object is over the search region
  rpc GetObjectBeliefs(GetObjectBeliefsRequest) returns (GetObjectBeliefsReply) {}

  // Get current belief about the robot state
  rpc GetRobotBelief(GetRobotBeliefRequest) returns (GetRobotBeliefReply) {}

  // Initialize a planner
  rpc InitPlanner(InitPlannerRequest) returns (InitPlannerReply) {}

  // Calls the planner to return an action for execution
  rpc PlanAction(PlanActionRequest) returns (PlanActionReply) {}
}


/////////////////////////////////////
// top-level rpc messages
/////////////////////////////////////
//// For CreateAgent rpc ////
message CreateAgentRequest {
  Header header = 1;
  string agent_name = 2;

  // serialized configuration dictionary
  bytes config = 3;
}

message CreateAgentReply {
  Header header = 1;
  Status status = 2;
  string message = 3;
}

//// For GetAgentCreationStatus rpc ////
message GetAgentCreationStatusRequest {
  Header header = 1;
  string agent_name = 2;
}

message GetAgentCreationStatusReply {
  Header header = 1;
  Status status = 2;
  string status_message = 3;
}

//// For UpdateSearchRegion rpc ////
message UpdateSearchRegionRequest {
  Header header = 1;
  string agent_name = 2;

  // Whether the search region is 3D.
  bool is_3d = 3;

  // robot pose in the world frame
  oneof robot_pose {
    Pose2D robot_pose_2d = 4;
    Pose3D robot_pose_3d = 5;
  }

  oneof search_region {
    OccupancyGrid occupancy_grid = 6;
    PointCloud point_cloud = 7;
  }

  oneof search_region_params {
    SearchRegionParams2D search_region_params_2d = 8;
    SearchRegionParams3D search_region_params_3d = 9;
  }
}

message UpdateSearchRegionReply {
  Header header = 1;
  Status status = 2;
  string message = 3;
}

//// For ProcessObservation rpc ////
message ProcessObservationRequest {
  Header header = 1;
  string agent_name = 2;

  oneof observation {
    RobotPose robot_pose = 3;
    ObjectDetection object_detections = 4;
    Language language = 5;
  }
}

message ProcessObservationReply {
  Header header = 1;
  Status status = 2;
  string message = 3;
}

//// For GetObjectBeliefs rpc ////
message GetObjectBeliefsRequest {
  Header header = 1;
  string agent_name = 2;
}

message GetObjectBeliefsReply {
  Header header = 1;
  repeated ObjectBelief object_beliefs = 2;
}


//// For GetRobotBelief  rpc ////
message GetRobotBeliefRequest {
  Header header = 1;
  string agent_name = 2;
}

message GetRobotBeliefReply {
  Header header = 1;

  // List of object ids for objects that the robot believes are found
  repeated string objects_found = 2;

  // robot pose (exact or a distribution; see RobotPose message definition)
  RobotPose pose = 3;

  // If the robot plans over a topological graph, this returns
  // the id of the topological graph node the robot associates itself
  // with currently.
  optional string topo_nid = 4;
}


//// For InitPlanner rpc ////
message InitPlannerRequest {}

message InitPlannerReply {}

//// For PlanAction rpc ////
message PlanActionRequest {}

message PlanActionReply {}



/////////////////////////////////////
// Auxiliary messages
/////////////////////////////////////
message SearchRegionParams2D {
  optional double layout_cut = 1;
  optional double floor_cut = 2;
  optional double grid_size = 3;
  optional double brush_size = 4;
  optional double region_size = 5;
  optional bool debug = 6;
}


message SearchRegionParams3D {
  optional int32 octree_size = 1;
  optional double search_space_resolution = 2;
  optional bool debug = 3;
}

message ObjectBelief {
  Header header = 1;
  string object_id = 2;
  Histogram dist = 3;
}
