// Top-level services. For example, start the sloop object search server

syntax = "proto3";

package sloop_object_search.grpc;

import "sloop_object_search/grpc/common.proto";
import "sloop_object_search/grpc/observation.proto";
import "sloop_object_search/grpc/action.proto";


service SloopObjectSearch {

  rpc CreateAgent(CreateAgentRequest) returns (CreateAgentReply) {}

  // Get agent status
  rpc GetAgentCreationStatus(GetAgentCreationStatusRequest) returns (GetAgentCreationStatusReply) {}

  // More fine-grained rpcs for specific functionality
  // Update search region by interpreting sensor data such as point cloud.
  rpc UpdateSearchRegion(UpdateSearchRegionRequest) returns (UpdateSearchRegionReply) {}

  // Process observation such as object detection or language, update agent belief
  rpc ProcessObservation(ProcessObservationRequest) returns (ProcessObservationReply) {}

  // Get current belief about where the object is over the search region
  rpc GetObjectBeliefs(GetObjectBeliefsRequest) returns (GetObjectBeliefsReply) {}

  // Get current belief about the robot state
  rpc GetRobotBelief(GetRobotBeliefRequest) returns (GetRobotBeliefReply) {}

  // Initialize a planner
  rpc CreatePlanner(CreatePlannerRequest) returns (CreatePlannerReply) {}

  // Calls the planner to return an action for execution
  rpc PlanAction(PlanActionRequest) returns (PlanActionReply) {}

}


/////////////////////////////////////
// top-level rpc messages
/////////////////////////////////////
//// For CreateAgent rpc ////
message CreateAgentRequest {
  Header header = 1;
  string robot_id = 2;

  // serialized configuration dictionary (UTF-8 encoding
  // of a YAML string (yaml.safe_load permitted; JSON-compatible)
  bytes config = 3;
}

message CreateAgentReply {
  Header header = 1;
  Status status = 2;
  string message = 3;
}

//// For GetAgentCreationStatus rpc ////
message GetAgentCreationStatusRequest {
  Header header = 1;
  string robot_id = 2;
}

message GetAgentCreationStatusReply {
  Header header = 1;
  Status status = 2;
  string status_message = 3;
}

//// For UpdateSearchRegion rpc ////
message UpdateSearchRegionRequest {
  Header header = 1;
  string robot_id = 2;

  // Whether the search region is 3D.
  bool is_3d = 3;

  // robot pose in the world frame
  RobotPose robot_pose = 4;

  oneof search_region {
    OccupancyGrid occupancy_grid = 5;
    PointCloud point_cloud = 6;
  }

  oneof search_region_params {
    SearchRegionParams2D search_region_params_2d = 7;
    SearchRegionParams3D search_region_params_3d = 8;
  }
}

message UpdateSearchRegionReply {
  Header header = 1;
  Status status = 2;
  string message = 3;
}

//// For ProcessObservation rpc ////
message ProcessObservationRequest {
  Header header = 1;
  string robot_id = 2;

  // Pose of the robot when receiving the observation.
  RobotPose robot_pose = 3;
  // Signals new objects are found
  ObjectsFound objects_found = 6;

  // If left out, then the observation is only about
  // the robot itself.
  oneof observation {
    ObjectDetectionArray object_detections  = 4;
    Language language = 5;
  }

  // the action that the observation is associated with (e.g. received after
  // action completion)
  optional string action_id = 7;
  // Set this to true if by the time this observation request is sent,
  // the action has finished.
  optional bool action_finished = 8;

  // return the pomdp model's fov corresponding to the object detection
  // Note that for different detectors (for different objects), there may
  // be different fovs
  optional bool return_fov = 9;

  // debug flag
  optional bool debug = 10;
}

message ProcessObservationReply {
  Header header = 1;
  Status status = 2;
  string message = 3;

  // set if 'return_fov' is True. This is a serialized
  // JSON string of the format:
  //   {'objid' -> {'visible_volume': [ [x,y,z,r] ... ],
  //                'obstacles_hit': [ [x,y,z,r] ... ] }}
  // Note that the x,y,z,r should all be in world frame
  bytes fovs = 4;
}

//// For GetObjectBeliefs rpc ////
message GetObjectBeliefsRequest {
  Header header = 1;
  string robot_id = 2;
  repeated string object_ids = 3;
  // scope: global or local
  Scope scope = 4;
}

message GetObjectBeliefsReply {
  Header header = 1;
  Status status = 2;
  string message = 3;
  repeated ObjectBelief object_beliefs = 4;
}


//// For GetRobotBelief rpc ////
message GetRobotBeliefRequest {
  Header header = 1;
  string robot_id = 2;
  Scope scope = 3;
}

message GetRobotBeliefReply {
  Header header = 1;
  Status status = 2;
  string message = 3;
  RobotBelief robot_belief = 4;
}

//// For CreatePlanner rpc ////
message CreatePlannerRequest {
  Header header = 1;
  string robot_id = 2;

  // serialized configuration dictionary (UTF-8 encoding
  // of a YAML string (yaml.safe_load permitted; JSON-compatible)
  bytes config = 4;

  // True if overwrite existing planner
  bool overwrite = 5;
}

message CreatePlannerReply {
  Header header = 1;
  Status status = 2;
  string message = 3;
}

//// For PlanAction rpc ////
message PlanActionRequest {
  Header header = 1;
  string robot_id = 2;
  // debug flag
  optional bool debug = 3;
}

message PlanActionReply {
  Header header = 1;
  Status status = 2;
  string message = 3;

  oneof action {
    MoveViewpoint move_action = 4;
    Find find_action = 5;
    KeyValueAction kv_action = 6;
  }

  // server-generated id used to identify an action
  // associated with a plan request
  string action_id = 7;
}


/////////////////////////////////////
// Auxiliary messages
/////////////////////////////////////
message SearchRegionParams2D {
  optional double layout_cut = 1;
  optional double floor_cut = 2;
  optional double grid_size = 3;
  optional double brush_size = 4;
  optional double region_size = 5;
  optional bool debug = 6;
}

message SearchRegionParams3D {
  optional int32 octree_size = 1;
  optional double search_space_resolution = 2;
  optional bool debug = 3;
  optional double region_size_x = 4;
  optional double region_size_y = 5;
  optional double region_size_z = 6;
}

// Used to indicate whether a message pertains to
// local search or global search.
enum Scope {
  LOCAL = 0;
  GLOBAL = 1;
}

message ObjectBelief {
  string object_id = 1;
  Histogram dist = 2;
  // the pickled Python belief object; For debugging;
  // the positions may be in POMDP frame
  optional bytes dist_obj = 3;

  // local or global scope
  Scope scope = 4;
}


message RobotBelief {
  string robot_id = 1;

  // robot pose (exact or a distribution; see RobotPose message definition)
  RobotPose pose = 2;

  // objects found
  ObjectsFound objects_found = 3;

  // local or global scope
  Scope scope = 4;
}
